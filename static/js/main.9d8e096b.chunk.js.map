{"version":3,"sources":["Main/Header/Nav/Nav.js","Main/Header/Header.js","Main/Page/Timeline/Timeline.js","Main/Page/Home.js","Main/Page/Experience.js","Main/Page/Activity.js","Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","handleInputChange","event","props","onNavChange","target","textContent","console","log","list","map","item","key","className","onClick","Component","Header","info","resume","window","addEventListener","this","resizeHeaderOnScroll","pageYOffset","distanceY","headerEl","document","getElementsByClassName","classList","add","getElementById","style","display","remove","id","name","role","Timeline","d3","classed","Home","about","summary","permanentAddress","Experience","exp","each","title","startDate","endDate","company","course","point","Activity","activity","act","Object","entries","websites","value","href","Main","state","nav","setNav","setState","headerHeight","clientHeight","marginTop","navClick","def","Resume","basics","experiences","activities","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9d8e096b.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport \"./Nav.css\";\nclass NavBar extends Component{\n  handleInputChange = (event) => {\n    this.props.onNavChange(event.target.textContent);\n    console.log(event.target.textContent);\n  }\n\n  render(){\n    const navList = [\"HOME\", \"EXPERIENCE\", \"ACTIVITY\"];\n    const list = navList.map((item, key) =>\n      <p className = \"nav\" key = {key} onClick = {this.handleInputChange}>{item}</p>\n    )\n    return(\n      <div  className = \"hor\">\n        {list}\n      </div>\n    )\n  };\n}\nexport default NavBar;\n","import React, {Component} from \"react\";\nimport \"./Header.css\";\nimport Navbar from \"./Nav/Nav\";\n\nclass Header extends Component{\n  constructor(props){\n    super(props);\n    this.info = this.props.resume;\n    this.onNavChange = this.props.onNavChange;\n  }\n  componentDidMount(){\n    window.addEventListener(\"scroll\", this.resizeHeaderOnScroll);\n  }\n\n  resizeHeaderOnScroll(){\n    console.log(window.pageYOffset);\n    const distanceY = window.pageYOffset;\n    const shrinkOn = 100;\n    const headerEl = document.getElementsByClassName(\"header\")[0];\n\n    if (distanceY > shrinkOn){\n      headerEl.classList.add(\"shrink\");\n      document.getElementById(\"space\").style.display = \"none\";\n      document.getElementById(\"role\").style.display = \"none\";\n    }\n    else{\n      headerEl.classList.remove(\"shrink\");\n      document.getElementById(\"space\").style.display = \"block\";\n      document.getElementById(\"role\").style.display = \"block\";\n    }\n    // console.log(headerEl);\n    // console.log(document.documentElement.scrollTop);\n  }\n\n  render(){\n    return(\n      <div className = \"header\">\n        <div id = \"space\">\n        </div>\n        <h1 className = \"title\" id = \"name\">\n          {this.info.name}\n        </h1>\n        <h3 className = \"title\" id = \"role\">\n          {this.info.role}\n        </h3>\n\n        <hr/>\n\n        <Navbar\n          onNavChange = {this.onNavChange}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Header;\n","import React, {Component} from \"react\";\nimport * as d3 from \"d3\";\n\nclass Timeline extends Component{\n  constructor(props){\n    super(props);\n  }\n  render(){\n    return(\n      <div id = \"timeline\"/>\n    );\n  }\n\n  componentDidMount(){\n    let chart = d3.select(\"#timeline\").classed(\"timeline\", true);\n  }\n}\nexport default Timeline;\n","import React, {Component} from \"react\";\nimport \"./Home.css\";\nimport Timeline from \"./Timeline/Timeline\";\n\nclass Home extends Component {\n  constructor(props){\n    super(props);\n    this.about = this.props.resume;\n  }\n\n  render(){\n    return(\n      <div className = \"home\">\n        <div className = \"orange box\" id = \"summary\">\n          <h2 className = \"title white bold\">\n            WHO AM I\n          </h2>\n          <p className = \"white\">\n            {this.about.summary}\n          </p>\n          <button>\n            Resume\n          </button>\n        </div>\n        <div className = \"gray box\" id = \"personal-info\">\n          <h2 className = \"title white bold\">\n            Personal info\n          </h2>\n          <p className = \"white\">\n            {this.about.permanentAddress}\n          </p>\n        </div>\n        <div className = \"gray box\" id = \"achievement\">\n          <h2 className = \"title white bold\">\n            achievement\n          </h2>\n          <Timeline/>\n          {/* single line with the dots representing event*/}\n        </div>\n        <div className = \"box\" id = \"skills\">\n          <h2 className = \"title bold\">\n            Skills\n          </h2>\n          {/*bar chart using d3*/}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, {Component} from 'react';\nimport \"./Experience.css\";\n\nclass Experience extends Component{\n  constructor(props){\n    super(props);\n    this.exp = this.props.exp;\n  }\n  render(){\n    const list = this.exp.map((each, key) =>\n      <div className = \"experience\" key = {key}>\n        <h3 className = \"experience title\">\n          {each.title}\n        </h3>\n        <p className = \"experience date\">\n          {each.startDate} {each.endDate}\n        </p>\n        <p className = \"experience company\">\n          {each.company}\n        </p>\n        <p className = \"experience course\">\n          {each.course}\n        </p>\n        <ul className = \"experience description\">\n          {each.summary.map((summary,key) =>\n            <li className = \"summary\" key = {key}>\n              {summary.point}\n            </li>\n          )}\n        </ul>\n      </div>\n    )\n\n    return(\n      <div>\n        {list}\n      </div>\n    );\n  }\n}\n\nexport default Experience;\n","import React, {Component} from 'react';\nimport \"./Activity.css\";\n\nclass Activity extends Component{\n  constructor(props){\n    super(props);\n    this.activity = this.props.act;\n  }\n  render(){\n    const list = this.activity.map((each, key) =>\n      <div className = \"activity\" key = {key}>\n        <h3 className = \"activity title\">\n          {each.title}\n        </h3>\n        <p className = \"activity date\">\n          {each.startDate} {each.endDate}\n        </p>\n        <p className = \"activity company\">\n          {each.company}\n        </p>\n        <p className = \"activity summary\">\n          {each.summary}\n        </p>\n        <ul className = \"activity websites\">\n          {Object.entries(each.websites).map(([key, value]) =>\n            <li className = \"url\" key = {key}>\n              <a href = {value}>sites</a>\n            </li>\n          )}\n        </ul>\n      </div>\n    )\n\n    return(\n      <div>\n        {list}\n      </div>\n    );\n  }\n}\n\nexport default Activity;\n","import React, {Component} from 'react';\nimport \"./Main.css\";\nimport Header from \"./Header/Header\";\nimport Resume from \"./resume.json\";\nimport Home from \"./Page/Home\";\nimport Experience from \"./Page/Experience\";\nimport Activity from \"./Page/Activity\";\n\nclass Main extends Component {\n  state = {\n    nav : \"\"\n  }\n\n  setNav = (nav) =>{\n    this.setState({\n      nav\n    })\n  }\n\n  componentDidMount(){\n    const headerHeight = document.getElementsByClassName(\"header\")[0].clientHeight + \"px\";\n    document.getElementsByClassName(\"content\")[0].style.marginTop = headerHeight;\n  }\n\n  render(){\n    const navClick = this.state.nav;\n    let nav;\n    var def = <Home resume = {Resume.basics}/>;\n\n\n    if(navClick === \"HOME\"){\n      nav = def;\n    }\n    else if(navClick === \"EXPERIENCE\"){\n      nav = <Experience exp = {Resume.experiences}/>;\n    }\n    else if(navClick === \"ACTIVITY\"){\n      nav = <Activity act = {Resume.activities}/>;\n    }\n    else {\n      nav = def;\n    }\n    return (\n      <div className = \"main\">\n        <Header\n          resume = {Resume.basics}\n          onNavChange = {this.setNav}\n        />\n        <div className = \"content\">\n          {nav}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React, {Component} from 'react';\nimport './App.css';\nimport Main from './Main/Main';\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n    document.title = \"Resume:Jaeung\"\n  }\n  render(){\n    return (\n      <Main/>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}