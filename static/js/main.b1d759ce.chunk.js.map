{"version":3,"sources":["Main/Header/Header.js","Main/Header/Nav/Nav.js","Main/Page/Home.js","Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","Component","props","info","resume","onNavChange","className","this","name","role","Home","about","summary","Main","state","nav","setNav","setState","navClick","def","Resume","basics","App","document","title","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"m6LAiCeA,G,wBC/BMC,Y,YDGnB,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,KAAO,EAAKD,MAAME,OACvB,EAAKC,YAAc,EAAKH,MAAMG,YAHd,E,sEAOhB,OACE,yBAAKC,UAAY,UACf,yBAAKA,UAAY,UAEjB,wBAAIA,UAAY,SACbC,KAAKJ,KAAKK,MAEb,wBAAIF,UAAY,SACbC,KAAKJ,KAAKM,MAGb,kC,GAnBaR,c,OEuBNS,G,kBAvBb,WAAYR,GAAO,IAAD,8BAChB,4CAAMA,KACDS,MAAQ,EAAKT,MAAME,OAFR,E,sEAMhB,OACE,6BACE,yBAAKE,UAAY,cACf,wBAAIA,UAAY,SAAhB,YAGA,2BACGC,KAAKI,MAAMC,SAEd,uC,GAhBSX,cC8CJY,E,2MA1CbC,MAAQ,CACNC,IAAM,I,EAGRC,OAAS,SAACD,GACR,EAAKE,SAAS,CACZF,S,wEAKF,IAAMG,EAAWX,KAAKO,MAAMC,IAExBI,EAAM,kBAAC,EAAD,CAAMf,OAAUgB,EAAOC,SAejC,MAZgB,SAAbH,EACKC,EAEa,eAAbD,EACA,GAEa,aAAbA,EACA,GAGAC,EAGN,yBAAKb,UAAY,QACf,yBAAKA,UAAY,WACf,kBAAC,EAAD,CACEF,OAAUgB,EAAOC,OACjBhB,YAAeE,KAAKS,e,GAlCbf,aCSJqB,E,YAVb,WAAYpB,GAAO,IAAD,6BAChB,4CAAMA,IACNqB,SAASC,MAAQ,gBAFD,E,sEAKhB,OACE,kBAAC,EAAD,U,GAPYvB,aCQEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASR,SAASS,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b1d759ce.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport \"./Header.css\";\nimport Navbar from \"./Nav/Nav\";\n\nclass Header extends Component{\n  constructor(props){\n    super(props);\n    this.info = this.props.resume;\n    this.onNavChange = this.props.onNavChange;\n  }\n\n  render(){\n    return(\n      <div className = \"header\">\n        <div className = \"space\">\n        </div>\n        <h1 className = \"title\">\n          {this.info.name}\n        </h1>\n        <h3 className = \"title\">\n          {this.info.role}\n        </h3>\n\n        <hr/>\n\n        {/*<Navbar\n          onNavChange = {this.onNavChange}\n        />*/}\n      </div>\n    )\n  }\n}\n\nexport default Header;\n","import React, {Component} from \"react\";\nimport \"./Nav.css\";\nclass NavBar extends Component{\n  handleInputChange = (event) => {\n    this.props.onNavChange(event.target.textContent);\n    console.log(event.target.textContent);\n  }\n  \n  render(){\n    const navList = [\"HOME\", \"EXPERIENCE\", \"ACTIVITY\"];\n    const list = navList.map((item, key) =>\n      <p className = \"nav\" key = {key} onClick = {this.handleInputChange}>{item}</p>\n    )\n    return(\n      <div  className = \"hor\">\n        {list}\n      </div>\n    )\n  };\n}\nexport default NavBar;\n","import React, {Component} from \"react\";\nimport \"./Home.css\";\n\nclass Home extends Component {\n  constructor(props){\n    super(props);\n    this.about = this.props.resume;\n  }\n\n  render(){\n    return(\n      <div>\n        <div className = \"orange-box\">\n          <h2 className = \"title\">\n            WHO AM I\n          </h2>\n          <p>\n            {this.about.summary}\n          </p>\n          <button>\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, {Component} from 'react';\nimport \"./Main.css\";\nimport Header from \"./Header/Header\";\nimport Resume from \"./resume.json\";\nimport Home from \"./Page/Home\";\n\nclass Main extends Component {\n  state = {\n    nav : \"\"\n  }\n\n  setNav = (nav) =>{\n    this.setState({\n      nav\n    })\n  }\n\n  render(){\n    const navClick = this.state.nav;\n    let nav;\n    var def = <Home resume = {Resume.basics} />;\n\n\n    if(navClick === \"HOME\"){\n      nav = def;\n    }\n    else if(navClick === \"EXPERIENCE\"){\n      nav = \"\";\n    }\n    else if(navClick === \"ACTIVITY\"){\n      nav = \"\";\n    }\n    else {\n      nav = def;\n    }\n    return (\n      <div className = \"main\">\n        <div className = \"content\">\n          <Header\n            resume = {Resume.basics}\n            onNavChange = {this.setNav}\n          />\n          {/*{nav}*/}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React, {Component} from 'react';\nimport './App.css';\nimport Main from './Main/Main';\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n    document.title = \"Resume:Jaeung\"\n  }\n  render(){\n    return (\n      <Main/>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}