{"version":3,"sources":["Main/Data/image.jpg","Main/Header/Nav/Nav.js","Main/Header/Header.js","Main/component/User.js","Main/component/About.js","Main/component/AnimatedProgressProvider.js","Main/component/skills/Skill.js","Main/component/skills/SkillList.js","Main/component/experiences/Experience.js","Main/component/experiences/ExperienceList.js","Main/Body/Pages/HomePage.js","Main/component/projects/Map.js","Main/component/projects/Chart.js","Main/component/projects/covidCases.js","Main/Body/Pages/ExperiencePage.js","Main/component/Form.js","Main/Body/Pages/LoginPages/LoginPage.js","Main/Body/Pages/LoginPages/LogoutPage.js","Main/Body/Pages/LoginPages/CreateAccountPage.js","Main/Body/Body.js","Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","useState","value","setValue","classes","makeStyles","theme","root","marginLeft","spacing","useStyles","className","Tabs","onChange","event","newValue","Tab","label","component","Link","to","process","Header","flexGrow","menuButton","marginRight","title","Toolbar","Typography","variant","Nav","display","flexDirection","margin","alignItems","paddingTop","paddingBottom","large","width","height","User","props","userInfo","Paper","elevation","Avatar","alt","src","Image","name","color","role","About","List","ListItem","ListItemAvatar","objective","Divider","permanentAddress","phone","AnimatedProgressProvider","interval","undefined","state","isAnimated","this","repeat","window","setInterval","setState","duration","clearInterval","start","valueStart","update","valueEnd","timing","ease","easingFunction","children","React","Component","defaultProps","Skill","years","skillName","easeQuadInOut","roundedValue","Math","round","maxValue","text","styles","buildStyles","pathTransition","padding","Skills","skills","skillInfo","Grid","container","map","skill","key","item","xs","year","listItems","summary","paddingLeft","Experience","experience","course","startDate","endDate","date","concat","ListItemText","primary","secondary","point","experiences","ExperienceList","flexWrap","child","marginTop","Home","direction","md","Data","basics","projects","Map","mapData","coronaData","setDate","type","setType","setCounty","yesterday","setYesterday","getAvailableDates","Set","each","report_date","useEffect","element","d3","select","setCaptions","dateButton","typeButton","on","target","selectedIndex","e","console","log","selectAll","data","enter","append","attr","loadButtons","style","scale","projection","translate","countyPath","svg","topojson","objects","cb_2015_virginia_county_20m","bounds","tooltip","features","classed","county","properties","GEOID","NAME","getAttribute","pageY","pageX","loadMapData","max","currentData","filter","yesterdayData","index","currentCounty","fips","parseInt","deaths","hospitalizations","total_cases","domain","range","interpolate","updateCaseData","textAlign","backgroundColor","id","Chart","setMax","getDataLength","length","remove","uniqueDataLength","xScale","yScale","call","tickValues","split","month","t","loadaxis","countyData","line","x","y","datum","updateData","CovidCases","loading","setLoading","setMapData","setCoronaData","then","geometries","match","params","projectName","Form","types","TextField","Button","Login","Logout","CreateAccount","Body","Container","path","ExperiencePage","Main","CssBaseline","AppBar","position","App","document","Boolean","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qFAAAA,EAAOC,QAAU,IAA0B,mC,mSCgC5BC,EAxBA,WAAK,IAAD,EACSC,mBAAS,GADlB,mBACVC,EADU,KACHC,EADG,KAWXC,EARYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJ,YAAa,CACXC,WAAYF,EAAMG,QAAQ,QAKhBC,GAEhB,OACI,yBAAKC,UAAaP,EAAQG,MACxB,kBAACK,EAAA,EAAD,CAAMV,MAASA,EAAOW,SAAY,SAACC,EAAMC,GAAYZ,EAASY,KAC5D,kBAACC,EAAA,EAAD,CAAKd,MAAS,EAAGe,MAAQ,OAAOC,UAAaC,IAAMC,GAAKC,gBC8EnDC,EAvFA,WAEb,IAYMlB,EAZYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJgB,SAAU,GAEZC,WAAY,CACVC,YAAanB,EAAMG,QAAQ,IAE7BiB,MAAO,CACLH,SAAU,MAIEb,GAGhB,OACE,oCACE,kBAACiB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKlB,UAAWP,EAAQsB,OAA5C,UAGA,kBAACI,EAAD,S,qDC7BFpB,EAAYL,aAAW,SAACC,GAAD,MAAW,CACpCC,KAAM,CACFwB,QAAS,OACTC,cAAe,SACf,QAAS,CACPC,OAAQ3B,EAAMG,QAAQ,IAExByB,WAAY,SACZC,WAAW,GACXC,cAAc,IAElBC,MAAO,CACHC,MAAOhC,EAAMG,QAAQ,IACrB8B,OAAQjC,EAAMG,QAAQ,SAwBf+B,EApBF,SAACC,GACV,IAAMrC,EAAUM,IACVgC,EAAWD,EAAMC,SAEvB,OACI,kBAACC,EAAA,EAAD,CAAOC,UAAa,EAAGjC,UAAaP,EAAQG,MACxC,kBAACsC,EAAA,EAAD,CAAQC,IAAI,aAAaC,IAAKC,IAAOrC,UAAWP,EAAQiC,QACxD,kBAACT,EAAA,EAAD,CAAYC,QAAQ,KAAKX,UAAU,MAC9BwB,EAASO,MAEd,kBAACrB,EAAA,EAAD,CAAYsB,MAAM,iBACbR,EAASS,Q,0FCgBXC,EArCD,SAACX,GACX,IAAMC,EAAWD,EAAMC,SAEvB,OACI,kBAACC,EAAA,EAAD,CAAOC,UAAY,GACf,kBAACS,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC,IAAD,OAEJ,kBAAC3B,EAAA,EAAD,KACKc,EAASc,YAGlB,kBAACC,EAAA,EAAD,CAAS5B,QAAQ,QAAQX,UAAU,OACnC,kBAACoC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC,IAAD,OAEJ,kBAAC3B,EAAA,EAAD,KACKc,EAASgB,mBAGlB,kBAACD,EAAA,EAAD,CAAS5B,QAAQ,QAAQX,UAAU,OACnC,kBAACoC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC,IAAD,OAEJ,kBAAC3B,EAAA,EAAD,KACKc,EAASiB,W,mCC1C5BC,E,4MACJC,cAAWC,E,EAEXC,MAAQ,CACNC,YAAY,G,kEAOO,IAAD,OACdC,KAAKxB,MAAMyB,OACbD,KAAKJ,SAAWM,OAAOC,aAAY,WACjC,EAAKC,SAAS,CACZL,YAAa,EAAKD,MAAMC,eAEH,IAAtBC,KAAKxB,MAAM6B,UAEdL,KAAKI,SAAS,CACZL,YAAaC,KAAKF,MAAMC,e,6CAM5BG,OAAOI,cAAcN,KAAKJ,Y,+BAGlB,IAAD,OACP,OACE,kBAAC,IAAD,CACEW,MAAO,iBAAO,CACZtE,MAAO,EAAKuC,MAAMgC,aAEpBC,OAAQ,iBAAO,CACbxE,MAAO,CACL,EAAK6D,MAAMC,WAAa,EAAKvB,MAAMkC,SAAW,EAAKlC,MAAMgC,YAE3DG,OAAQ,CACNN,SAAgC,IAAtB,EAAK7B,MAAM6B,SACrBO,KAAM,EAAKpC,MAAMqC,oBAIpB,gBAAG5E,EAAH,EAAGA,MAAH,OAAe,EAAKuC,MAAMsC,SAAS7E,U,GA7CL8E,IAAMC,WAAvCrB,EAOGsB,aAAe,CACpBT,WAAY,GA2CDb,QC9CTlD,EAAYL,YAAW,CACzBE,KAAK,CACDwB,QAAQ,OACRC,cAAc,SACdE,WAAY,YA2CLiD,EAvCD,SAAC1C,GACX,IAAM2C,EAAQ3C,EAAM2C,MACdC,EAAY5C,EAAM4C,UAElBjF,EAAUM,IAGhB,OACI,yBAAKC,UAAaP,EAAQG,MACtB,kBAAC,EAAD,CACIkE,WAAY,EACZE,SAAUS,EACVd,SAAUc,EAAM,EAChBN,eAAgBQ,MAEf,SAAApF,GACG,IAAMqF,EAAeC,KAAKC,MAAMvF,GAChC,OACI,kBAAC,IAAD,CACAA,MAAOA,EACPwF,SAAY,EACZC,KAAI,UAAKJ,EAAL,OAGJK,OAAQC,YAAY,CAChBC,eAAgB,cAOhC,kBAAClE,EAAA,EAAD,CAAYC,QAAQ,MACfwD,K,SC3CX3E,EAAYL,YAAW,CACzBE,KAAK,CACDwB,QAAQ,OACRgE,QAAQ,MAuBDC,EApBA,SAACvD,GACZ,IAAMrC,EAAUM,IAEVuF,EAASxD,EAAMyD,UAErB,OACI,kBAACvD,EAAA,EAAD,CAAOC,UAAW,EAAGjC,UAAaP,EAAQG,MACtC,kBAAC4F,EAAA,EAAD,CAAMC,WAAS,EAAC3F,QAAW,IACtBwF,EAAOI,KAAK,SAACC,EAAMC,GAChB,OACI,kBAACJ,EAAA,EAAD,CAAMK,MAAI,EAACC,IAAE,EAACF,IAAOA,GACjB,kBAAC,EAAD,CAAOnB,MAASkB,EAAMI,KAAMrB,UAAaiB,EAAMrD,c,SClBrEvC,EAAYL,YAAW,CACzBsG,UAAU,CACN5E,QAAQ,OACRC,cAAc,SACdE,WAAW,SAEf0E,QAAQ,CACJC,YAAY,UA2CLC,EAvCI,SAACrE,GAChB,IAAMrC,EAAUM,IADQ,EAG0B+B,EAAMsE,WAAnDrF,EAHmB,EAGnBA,MAAOsF,EAHY,EAGZA,OAAQC,EAHI,EAGJA,UAAUC,EAHN,EAGMA,QAASN,EAHf,EAGeA,QAEnCO,EAAO,GAQX,MAPc,KAAXH,IACCG,EAAOA,EAAKC,OAAOJ,EAAS,QAEhCG,EAAOA,EAAKC,OAAOH,EACnB,MACAC,GAGI,6BACI,kBAACzD,EAAA,EAAD,MACA,kBAACH,EAAA,EAAD,CAAU3C,UAAaP,EAAQuG,WAC3B,kBAACU,EAAA,EAAD,CACIC,QACI,kBAAC1F,EAAA,EAAD,CAAYC,QAAQ,KAAKX,UAAWC,IAAMC,GAAIC,UAAA,iBAAmCK,IAC5EA,GAGT6F,UAAWJ,IAEf,kBAACE,EAAA,EAAD,CAAc1G,UAAYP,EAAQwG,SAC7BA,EAAQP,KAAI,SAACmB,EAAMjB,GAChB,OACI,kBAAC3E,EAAA,EAAD,CAAY2E,IAAOA,GACdiB,EAAMA,cCvCjC9G,EAAYL,YAAW,CACzBoH,YAAY,CACR1B,QAAQ,UAuBD2B,EAnBQ,SAACjF,GACpB,IAAMrC,EAAUM,IACV+G,EAAchF,EAAMgF,YAE1B,OACI,kBAAC9E,EAAA,EAAD,CAAOC,UAAY,EAAGjC,UAAaP,EAAQqH,aACvC,kBAAC7F,EAAA,EAAD,CAAYC,QAAU,MAAtB,eAGA,kBAACwB,EAAA,EAAD,KACKoE,EAAYpB,KAAI,SAACU,EAAYR,GAC1B,OACI,kBAAC,EAAD,CAAYQ,WAAcA,EAAYR,IAAOA,U,SCX/D7F,GAAYL,YAAW,CAC3BE,KAAM,CACJoH,SAAU,QAEZC,MAAM,CACJC,UAAU,MAuFCC,GAnFF,WAEX,IAAM1H,EAAUM,KAEhB,OACE,oCAEE,kBAACyF,EAAA,EAAD,CAAMC,WAAS,EAAC3F,QAAW,EAAGE,UAAaP,EAAQG,MACjD,kBAAC4F,EAAA,EAAD,CAAMC,WAAS,EAAC2B,UAAY,SAASvB,MAAI,EAACwB,GAAM,EAAGvB,GAAM,IACvD,kBAACN,EAAA,EAAD,CAAMxF,UAAaP,EAAQwH,OACzB,kBAAC,EAAD,CAAMlF,SAAYuF,GAAKC,WAG3B,kBAAC/B,EAAA,EAAD,CAAMC,WAAS,EAAC2B,UAAW,SAASvB,MAAI,EAACwB,GAAM,EAAGvB,GAAM,IACtD,kBAACN,EAAA,EAAD,CAAMxF,UAAaP,EAAQwH,OACzB,kBAAC,EAAD,CAAOlF,SAAYuF,GAAKC,UAE1B,kBAAC/B,EAAA,EAAD,CAAMxF,UAAaP,EAAQwH,OACzB,kBAAC,EAAD,CAAQ1B,UAAa+B,GAAKhC,UAG5B,kBAACE,EAAA,EAAD,CAAMxF,UAAaP,EAAQwH,OACzB,kBAAC,EAAD,CAAgBH,YAAeQ,GAAKR,eAGtC,kBAACtB,EAAA,EAAD,CAAMxF,UAAaP,EAAQwH,OACzB,kBAAC,EAAD,CAAgBH,YAAeQ,GAAKE,gB,oCCoPjCC,I,OA9RH,SAAC3F,GAAW,IAEZ4F,EAAiE5F,EAAjE4F,QAASC,EAAwD7F,EAAxD6F,WAAYnB,EAA4C1E,EAA5C0E,KAAMoB,EAAsC9F,EAAtC8F,QAASC,EAA6B/F,EAA7B+F,KAAMC,EAAuBhG,EAAvBgG,QAASC,EAAcjG,EAAdiG,UAFxC,EAGezI,mBAAS,IAHxB,mBAGZ0I,EAHY,KAGDC,EAHC,KAqQnB,SAASC,IACL,OAAO,aAAI,IAAIC,IAAIR,EAAWjC,KAAI,SAAC0C,GAC/B,OAAOA,EAAKC,iBAMpB,OArQAC,qBAAU,YAeV,WACI,IAAMC,EAAUC,KAAU,cAC1BD,EACKE,OAAO,YACPzD,KAAK,2CACVuD,EACKE,OAAO,eACPzD,KAAK,yDArBV0D,GA2BJ,WACI,IAAMC,EAAaH,KAAU,eACvBI,EAAaJ,KAAU,eAK7BG,EACKE,GAAG,UAAU,SAAC1I,GACXyH,EAAQzH,EAAM2I,OAAOvJ,OACrB,IACI0I,EAAa9H,EAAM2I,OAAO3I,EAAM2I,OAAOC,cAAgB,GAAGxJ,OAE9D,MAAOyJ,GACHf,EAAa,IACbgB,QAAQC,IAAI,kBAGnBC,UAAU,UACVC,KAAKlB,KACLmB,QACAC,OAAO,UACPtE,MAAK,SAACzF,EAAOqG,GACV,OAAOrG,KAGfqI,EAAQM,IAAoB,IAC5BD,EAAaC,IAAoB,IAGjCU,EACKC,GAAG,UAAU,SAAC1I,GACX2H,EAAQ3H,EAAM2I,OAAOvJ,UAExB4J,UAAU,UACVC,KA/BS,CAAC,SAAU,mBAAoB,UAgCxCC,QACAC,OAAO,UACPC,KAAK,SAAS,SAAChK,EAAOqG,GACnB,OAAOrG,KAEVyF,MAAK,SAACzF,EAAOqG,GACV,OAAOrG,KApEfiK,GA2EAhB,KACY,YACPiB,MAAM,aAAc,UACpBA,MAAM,WAAY,YAClBA,MAAM,mBAAoB,SAC1BA,MAAM,UAAW,OACjBA,MAAM,SAAU,oBAIzB,SAAqBC,GAAQ,IAGrBC,EAAanB,OAEZkB,MAAM,IAAQA,GACdE,UAAU,CAAC,EAAG,IAEfC,EAAarB,OAEZmB,WAAWA,GAEZG,EAAMtB,KACE,QACPe,KAAK,sBAAuB,iBAC5BA,KAAK,UAAW,iBAEjBnG,EAAQ2G,KAAiBrC,EAASA,EAAQsC,QAAQC,6BAClDC,EAASL,EAAWK,OAAO9G,GAE/BuG,EAAWC,UAAU,CAACjI,KAAauI,EAAO,GAAG,GAAKA,EAAO,GAAG,IAAM,EAAGtI,KAAcsI,EAAO,GAAG,GAAKA,EAAO,GAAG,IAAM,IAElH,IAAIC,EAAU3B,KAAU,YAExBsB,EACKX,UAAU,QACVC,KAAKhG,EAAMgH,UACXf,QACAC,OAAO,QACPe,QAAQ,UAAU,GAClBd,KAAK,MAAM,SAAAe,GACR,OAAOA,EAAOC,WAAWC,SAE5BjB,KAAK,QAAQ,SAAAe,GACV,OAAOA,EAAOC,WAAWE,QAG5BlB,KAAK,OAAQ,QACbE,MAAM,SAAU,SAChBA,MAAM,eAAgB,OACtBA,MAAM,iBAAkB,SACxBA,MAAM,kBAAmB,SACzBF,KAAK,QAAS,GACdA,KAAK,IAAKM,GACVhB,GAAG,SAAS,SAAC1I,EAAOZ,GAEjBwI,EAAUxI,EAAMgL,WAAWC,UAE9B3B,GAAG,aAAa,SAAC1I,GAEdqI,KAAUrI,EAAM2I,QACXW,MAAM,UAAW,OACjBA,MAAM,eAAgB,OAE3B,IAAIlK,EAAQY,EAAM2I,OAAO4B,aAAa,SAEtC,OADAP,EAAQnF,KAAR,UAAgB7E,EAAM2I,OAAO4B,aAAa,QAA1C,aAAsDnL,IAC/C4K,EAAQV,MAAM,aAAc,cAEtCZ,GAAG,aAAa,SAAC1I,GACd,OAAOgK,EACFV,MAAM,MAAQtJ,EAAMwK,MAAQ,GAAM,MAClClB,MAAM,OAAStJ,EAAMyK,MAAQ,GAAM,SAE3C/B,GAAG,YAAY,SAAC1I,GAOb,OALAqI,KAAUrI,EAAM2I,QACXW,MAAM,UAAW,KACjBA,MAAM,eAAgB,OAE3BU,EAAQnF,KAAK,IACNmF,EAAQV,MAAM,aAAc,aAzJ3CoB,CAAY,MAEb,IAEHvC,qBAAU,YA2JV,WACI,IAQIwC,EAREC,EAAcpD,EAAWqD,QAAO,SAAC5B,GACnC,OAAOA,EAAKf,cAAgB7B,KAE1ByE,EAAgBtD,EAAWqD,QAAO,SAAC5B,GACrC,OAAOA,EAAKf,cAAgBL,KAKhC,OAAQH,GACJ,IAAK,SAGL,IAAK,mBACDiD,EAAM,EACN,MACJ,IAAK,QACDA,EAAM,IACN,MACJ,QACIA,EAAM,KAKdC,EAAYrF,KAAI,SAAC0D,EAAM8B,GACnB,IAAI3L,EACA4L,EAAgB3C,KACR,OACPC,OAAO,UAAYW,EAAKgC,KAAO,MAGpC,IACiB,WAATvD,EAEItI,OADyB4D,IAAzB8H,EAAcC,GACNG,SAASjC,EAAKkC,QAEdlC,EAAKkC,OAASL,EAAcC,GAAOI,OAGjC,qBAATzD,EAEDtI,OADyB4D,IAAzB8H,EAAcC,GACNG,SAASjC,EAAKmC,kBAGdnC,EAAKmC,iBAAmBN,EAAcC,GAAOK,iBAG3C,UAAT1D,EAEDtI,OADyB4D,IAAzB8H,EAAcC,GACNG,SAASjC,EAAKoC,aAGdpC,EAAKoC,YAAcP,EAAcC,GAAOM,YAIpDvC,QAAQC,IAAI,cAIhBiC,EACK5B,KAAK,QADV,UACsB1B,EADtB,aAC+BtI,IAEnC,MAAOyJ,GACHC,QAAQC,IAAI,0BAIhBiC,EACK5B,KAAK,QAAQ,WACV,OAAOf,OAEFiD,OAAO,EAAE,EAAG,EAAGX,EAAM,EAAGA,IACxBY,MAAM,CAAC,QAAS,QAAS,SAAU,QACnCC,YAAYnD,KAJVA,CAI6BjJ,SAtOhDqM,KACD,CAACpF,EAAMqB,EAAMG,IA4PZ,yBAAKhI,UAAU,YAAYyJ,MAAO,CAAEoC,UAAW,SAAUC,gBAAgB,WACrE,wBAAI9L,UAAU,WAAd,yBAGA,uBAAGA,UAAU,cAAb,4BAGA,4BAAQA,UAAU,mBAClB,4BAAQA,UAAU,mBAClB,yBAAK+L,GAAG,QAER,yBAAK/L,UAAU,eCvFZgM,GApMD,SAAClK,GAAW,IAEd6F,EAA6B7F,EAA7B6F,WAAY2C,EAAiBxI,EAAjBwI,OAAQzC,EAAS/F,EAAT+F,KAFP,EAGAvI,mBAAS,KAHT,mBAGdwL,EAHc,KAGVmB,EAHU,KA2KrB,SAASC,IACL,OAAO,aAAI,IAAI/D,IAAIR,EAAWjC,KAAI,SAAC0C,GAC/B,OAAOA,EAAKC,iBACX8D,OAKT,OA5KA7D,qBAAU,YAcV,WACI,IAAMC,EAAUC,KAAU,gBAC1BD,EACKE,OAAO,YACPzD,KAAK,0CACVuD,EACKE,OAAO,eACPzD,KAAK,4DApBV0D,GA2BAF,KAAU,kBACLiB,MAAM,UAAW,OAGtBjB,KAAU,UACLe,KAAK,sBAAuB,iBAC5BA,KAAK,UAFV,cAtCqB,KAsCrB,YAtC2B,OAyCtBE,MAAM,WAAY,WAClBH,OAAO,OAjCb,IAEHhB,qBAAU,YAmCV,WACI,IAEIwB,EAFQtB,KAAU,UAGjBC,OAAO,KAEZqB,EAAIX,UAAU,KACTiD,SAEL,IAAIC,EAAmBH,IAGnBI,EAAS9D,OACRiD,OAAO,CAAC,EAAGY,EAAmB,IAC9BX,MAAM,CA5DU,KA4DF,IAGfa,EAAS/D,OACRiD,OAAO,CAAC,EAAGX,IACXY,MAAM,CAjEgB,KAiEP,IAQpB5B,EAAIR,OAAO,KACNC,KAAK,QAAS,SACdA,KAAK,YAFV,uBAzE2B,KAyE3B,MAGKiD,KAAKhE,KAAc8D,GAAQG,WAAWjE,KAAS,EAAG6D,EAAkB,KAGzEvC,EAAIR,OAAO,KACNC,KAAK,QAAS,SACdA,KAAK,YAFV,oBA/EqB,KA+ErB,SAGKiD,KAAKhE,KAAa+D,GAAQE,WAAWjE,KAAS,EAAGsC,EAAK,OAE3DhB,EACKrB,OAAO,UACPU,UAAU,QACVnE,MAAK,SAACkG,GAAW,IAAD,EA8Ed,aAAI,IAAI/C,IAAIR,EAAWjC,KAAI,SAAC0C,GAC/B,OAAOA,EAAKC,iBA9E8C6C,GAAOwB,MAAM,OADtD,mBACN3G,EADM,KACA4G,EADA,KACOnG,EADP,UAEb,MAAM,GAAN,OAAWmG,EAAX,YAAoBnG,EAApB,YAA4BT,MAKpC+D,EACKrB,OAAO,UACPU,UAAU,QACVnE,MAAK,SAAC4H,GACH,OAAOA,KAtFfC,GA0FJ,WAGIrE,KAAU,SACL4D,SAEL,IAAIU,EAAanF,EAAWqD,QAAO,SAAC5C,GAChC,OAAOA,EAAKgD,OAASd,KAGrBlB,EAAI,aAAQ0D,EAAWpH,KAAI,SAAC0C,EAAM8C,GAClC,MAAa,WAATrD,EACOO,EAAKkD,OAEE,qBAATzD,EACEO,EAAKmD,iBAEE,UAAT1D,EACEO,EAAKoD,YAGL,SAIfS,EAAO7C,EAAK,IAEZ,IAAIiD,EAAmBH,IAGnBI,EAAS9D,OACRiD,OAAO,CAAC,EAAGY,EAAmB,IAC9BX,MAAM,CAtIU,KAsIF,IAEfa,EAAS/D,OACRiD,OAAO,CAAC,EAAGX,IACXY,MAAM,CA1IgB,KA0IP,IAGhBqB,EAAOvE,OACNwE,GAAE,SAAC5D,EAAM8B,GAEN,OAAOoB,EAAOpB,MAEjB+B,GAAE,SAAC7D,EAAM8B,GACN,OAAOqB,EAAOnD,MAGtBZ,KAAU,gBACLC,OAAO,KACPa,OAAO,QACP4D,MAAM9D,GACNiB,QAAQ,QAAQ,GAChBd,KAAK,IAAKwD,GACVtD,MAAM,OAAQ,QACdA,MAAM,eAAgB,GACtBA,MAAM,SAAU,UAjJrB0D,KACD,CAAC7C,EAAQQ,IAqKR,yBAAK9K,UAAU,cAAcyJ,MAAO,CAAEoC,UAAW,SAAUC,gBAAiB,UACxE,wBAAI9L,UAAU,WAAd,yBAGA,uBAAGA,UAAU,cAAb,4BAGA,yBAAKA,UAAU,iBACX,yBAAK+L,GAAG,WAGZ,yBAAK/L,UAAU,cC9HZoN,GA9DI,WAAO,IAAD,EACO9N,oBAAS,GADhB,mBAChB+N,EADgB,KACPC,EADO,OAEOhO,mBAAS,IAFhB,mBAEhBoI,EAFgB,KAEP6F,EAFO,OAGajO,mBAAS,IAHtB,mBAGhBqI,EAHgB,KAGJ6F,EAHI,OAIClO,mBAAS,IAJV,mBAIhBkH,EAJgB,KAIVoB,EAJU,OAKCtI,mBAAS,IALV,mBAKhBuI,EALgB,KAKVC,EALU,OAMKxI,mBAAS,IANd,mBAMhBgL,EANgB,KAMRvC,EANQ,KA+BvB,OAtBAO,qBAAU,WACJ+E,GAGF7E,KAfqB,kHAeOiF,MAAK,SAAC/F,GAChCc,KAfyB,qDAeSiF,MAAK,SAAC9F,GACtC4F,EAAW7F,GAEX8F,EAAc7F,GACdG,EAAQ,UAGRC,EAAUL,EAAQsC,QAAQC,4BAA4ByD,WAAW,GAAGnD,WAAWC,OAG/E8C,GAAW,WAKhB,CAACD,IAGF,6BAEIA,EACE,yCAGE,6BAEE,kBAAC,GAAD,CACE3F,QAASA,EACTC,WAAYA,EACZnB,KAAMA,EACNoB,QAASA,EACTC,KAAMA,EACNC,QAASA,EACTwF,WAAYA,EACZvF,UAAWA,IAEb,kBAAC,GAAD,CACEJ,WAAYA,EACZ2C,OAAQA,EACRzC,KAAMA,OCFP1B,GAtDI,SAAC,GAAW,IAAVwH,EAAS,EAATA,MACjB,MAAgC,+BAA7BA,EAAMC,OAAOC,YAER,oCACI,2BAAIF,EAAMC,OAAOC,aACjB,kBAAC,GAAD,OAMJ,2BAAIF,EAAMC,OAAOC,c,oBCoBdC,GA9BF,SAAChM,GAEV,MAAmB,UAAhBA,EAAMiM,MAED,kBAAC/L,EAAA,EAAD,KACI,kBAACgM,GAAA,EAAD,CAAWjC,GAAG,iBAAiBzL,MAAQ,aACvC,kBAAC0N,GAAA,EAAD,CAAWjC,GAAG,iBAAiBzL,MAAQ,aACvC,kBAAC2N,GAAA,EAAD,eAIY,kBAAhBnM,EAAMiM,MAEN,kBAAC/L,EAAA,EAAD,KACI,kBAACgM,GAAA,EAAD,CAAWjC,GAAG,iBAAiBzL,MAAQ,eACvC,kBAAC0N,GAAA,EAAD,CAAWjC,GAAG,iBAAiBzL,MAAQ,cACvC,kBAAC0N,GAAA,EAAD,CAAWjC,GAAG,iBAAiBzL,MAAQ,aACvC,kBAAC0N,GAAA,EAAD,CAAWjC,GAAG,iBAAiBzL,MAAQ,aAEvC,kBAAC2N,GAAA,EAAD,wBAMJ,2CClBGC,GARD,WACV,OACI,yBAAKlO,UAAY,aACb,kBAAC,GAAD,CAAM+N,MAAQ,YCGXI,GARA,WACX,OACI,yBAAKnO,UAAU,cACX,uCCOGoO,GARO,WAClB,OACI,yBAAKpO,UAAY,qBACb,kBAAC,GAAD,CAAM+N,MAAQ,oBCuBXM,GAjBF,WACT,OACI,kBAACC,EAAA,EAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAM7N,gBAAmCH,UAAa2N,KAC7D,kBAAC,IAAD,CAAOK,KAAM7N,iBAAoCH,UAAa4N,KAC9D,kBAAC,IAAD,CAAOI,KAAM7N,yBAA4CH,UAAa6N,KAEtE,kBAAC,IAAD,CAAOG,KAAM7N,6BAAgDH,UAAWiO,KAExE,kBAAC,IAAD,CAAOD,KAAM7N,WAA8BH,UAAW4G,Q,oBCGvDsH,GAfF,WAEX,OACE,oCACE,kBAACC,GAAA,EAAD,MACA,kBAAC,IAAD,KACE,kBAACC,GAAA,EAAD,CAAQC,SAAS,UACb,kBAAC,EAAD,OAEJ,kBAAC,GAAD,SCJOC,G,kDAVb,WAAY/M,GAAO,IAAD,6BAChB,cAAMA,GACNgN,SAAS/N,MAAQ,gBAFD,E,qDAKhB,OACE,kBAAC,GAAD,U,GAPYuD,aCOEyK,QACW,cAA7BvL,OAAOwL,SAASC,UAEe,UAA7BzL,OAAOwL,SAASC,UAEhBzL,OAAOwL,SAASC,SAAStB,MACvB,2D,OCVNuB,IAASC,OAAO,kBAAC,GAAD,MAASL,SAASM,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,MAAK,SAAA+B,GACjCA,EAAaC,iB","file":"static/js/main.c4f14bba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image.2cf8023d.jpg\";","import React,{useState} from \"react\";\n\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport {Link} from 'react-router-dom';\n\nconst NavBar = ()=>{\n  const [value, setValue] = useState(0);\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      '& > * + *': {\n        marginLeft: theme.spacing(2),\n      },\n    },\n  }));\n\n  const classes = useStyles();\n\n  return(\n      <div className = {classes.root}>\n        <Tabs value = {value} onChange = {(event,newValue)=>{setValue(newValue)}}>\n          <Tab value = {0} label = \"HOME\" component = {Link} to ={process.env.PUBLIC_URL + \"/\"}/>\n          {/* <Tab value = {1} label = \"EXPERIENCE\" component = {Link} to =\"/experience\"/>\n          <Tab value = {2} label = \"ACTIVITY\" component = {Link} to =\"/activity\"/> */}\n        </Tabs>\n      </div>\n  )\n}\n\nexport default NavBar;\n","import React from \"react\";\n\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n// import IconButton from '@material-ui/core/IconButton';\n// import MenuIcon from '@material-ui/icons/Menu';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {Link} from 'react-router-dom';\n\n\n// import Logo from './Logo/Logo';\nimport Navbar from \"./Nav/Nav\";\n\n\nconst Header = ()=>{\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  }));\n\n  const classes = useStyles();\n\n\n  return(\n    <>\n      <Toolbar>\n        <Typography variant=\"h6\" className={classes.title}>\n          Resume\n        </Typography>\n        <Navbar/>\n        {/* <Button component ={Link} to ={process.env.PUBLIC_URL + \"/login\"} color=\"inherit\">Login</Button>\n        <Button component ={Link} to ={process.env.PUBLIC_URL + \"/logout\"} color=\"inherit\">Logout</Button>\n        <Button component ={Link} to ={process.env.PUBLIC_URL + \"/create-account\"} color=\"inherit\">Create Account</Button> */}\n        {/* <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n          <MenuIcon />\n        </IconButton> */}\n      </Toolbar>\n    </>\n  )\n}\n\n// class Header extends Component{\n//   constructor(props){\n//     super(props);\n//     this.info = this.props.resume;\n//     this.onNavChange = this.props.onNavChange;\n//   }\n//   componentDidMount(){\n//     window.addEventListener(\"scroll\", this.resizeHeaderOnScroll);\n//   }\n\n//   resizeHeaderOnScroll(){\n//     console.log(window.pageYOffset);\n//     const distanceY = window.pageYOffset;\n//     const shrinkOn = 100;\n//     const headerEl = document.getElementsByClassName(\"header\")[0];\n\n//     if (distanceY > shrinkOn){\n//       headerEl.classList.add(\"shrink\");\n//       document.getElementById(\"space\").style.display = \"none\";\n//       document.getElementById(\"role\").style.display = \"none\";\n//     }\n//     else{\n//       headerEl.classList.remove(\"shrink\");\n//       document.getElementById(\"space\").style.display = \"block\";\n//       document.getElementById(\"role\").style.display = \"block\";\n//     }\n//     // console.log(headerEl);\n//     // console.log(document.documentElement.scrollTop);\n//   }\n\n//   render(){\n//     return(\n//       <div className = \"header\">\n//         <div id = \"space\">\n//         </div>\n//         <h1 className = \"title\" id = \"name\">\n//           {this.info.name}\n//         </h1>\n//         <h3 className = \"title\" id = \"role\">\n//           {this.info.role}\n//         </h3>\n\n//         <hr/>\n\n//         <Navbar\n//           onNavChange = {this.onNavChange}\n//         />\n//       </div>\n//     )\n//   }\n// }\n\nexport default Header;\n","import React from 'react';\n\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from '@material-ui/core/Typography';\nimport Avatar from '@material-ui/core/Avatar';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Image from \"../Data/image.jpg\";\n\nconst useStyles = makeStyles((theme) =>({\n    root: {\n        display: 'flex',\n        flexDirection: \"column\",\n        '& > *': {\n          margin: theme.spacing(1),\n        },\n        alignItems: \"center\",\n        paddingTop:40,\n        paddingBottom:40\n      },\n    large: {\n        width: theme.spacing(20),\n        height: theme.spacing(20),\n      }\n}));\n\nconst User = (props)=>{\n    const classes = useStyles();\n    const userInfo = props.userInfo;\n\n    return(\n        <Paper elevation = {3} className = {classes.root}>\n            <Avatar alt=\"Remy Sharp\" src={Image} className={classes.large} />\n            <Typography variant=\"h5\" component=\"h2\">\n                {userInfo.name}\n            </Typography>\n            <Typography color=\"textSecondary\">\n                {userInfo.role}\n            </Typography>\n            {/* <Typography variant=\"body2\" component=\"p\">\n                icons for phone and related sources...\n            </Typography> */}\n        </Paper>\n    )\n}\n\nexport default User;","import React from 'react';\n\nimport Paper from '@material-ui/core/Paper';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\n// import ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\n// import Avatar from '@material-ui/core/Avatar';\nimport Divider from '@material-ui/core/Divider';\n\nimport { Typography } from '@material-ui/core';\n\nimport MyLocationIcon from '@material-ui/icons/MyLocation';\nimport DoneIcon from '@material-ui/icons/Done';\nimport SmartphoneIcon from '@material-ui/icons/Smartphone';\n\nconst About = (props)=>{\n    const userInfo = props.userInfo;\n\n    return(\n        <Paper elevation ={3}>\n            <List>\n                <ListItem>\n                    <ListItemAvatar>\n                        <DoneIcon />\n                    </ListItemAvatar>\n                    <Typography>\n                        {userInfo.objective}\n                    </Typography>\n                </ListItem>\n                <Divider variant=\"inset\" component=\"li\" />\n                <ListItem>\n                    <ListItemAvatar>\n                        <MyLocationIcon />\n                    </ListItemAvatar>\n                    <Typography>\n                        {userInfo.permanentAddress}\n                    </Typography>\n                </ListItem>\n                <Divider variant=\"inset\" component=\"li\" />\n                <ListItem>\n                    <ListItemAvatar>\n                        <SmartphoneIcon />\n                    </ListItemAvatar>\n                    <Typography>\n                        {userInfo.phone}\n                    </Typography>\n                </ListItem>\n            </List>\n        </Paper>\n    )\n}\n\nexport default About;","import React from \"react\";\nimport { Animate } from \"react-move\";\n\nclass AnimatedProgressProvider extends React.Component {\n  interval = undefined;\n\n  state = {\n    isAnimated: false\n  };\n\n  static defaultProps = {\n    valueStart: 0\n  };\n\n  componentDidMount() {\n    if (this.props.repeat) {\n      this.interval = window.setInterval(() => {\n        this.setState({\n          isAnimated: !this.state.isAnimated\n        });\n      }, this.props.duration * 1000);\n    } else {\n      this.setState({\n        isAnimated: !this.state.isAnimated\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    window.clearInterval(this.interval);\n  }\n\n  render() {\n    return (\n      <Animate\n        start={() => ({\n          value: this.props.valueStart\n        })}\n        update={() => ({\n          value: [\n            this.state.isAnimated ? this.props.valueEnd : this.props.valueStart\n          ],\n          timing: {\n            duration: this.props.duration * 1000,\n            ease: this.props.easingFunction\n          }\n        })}\n      >\n        {({ value }) => this.props.children(value)}\n      </Animate>\n    );\n  }\n}\n\nexport default AnimatedProgressProvider;\n","import React from 'react';\n\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport { easeQuadInOut } from \"d3-ease\";\nimport AnimatedProgressProvider from \"../AnimatedProgressProvider\";\nimport { Typography, makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n    root:{\n        display:\"flex\",\n        flexDirection:\"column\",\n        alignItems: \"center\"\n    }\n})\n\nconst Skill = (props)=>{\n    const years = props.years;\n    const skillName = props.skillName;\n\n    const classes = useStyles();\n\n    // const years = 3;\n    return(\n        <div className = {classes.root}>\n            <AnimatedProgressProvider\n                valueStart={0}\n                valueEnd={years}\n                duration={years/2}\n                easingFunction={easeQuadInOut}\n                > \n                {value => {\n                    const roundedValue = Math.round(value);\n                    return (\n                        <CircularProgressbar\n                        value={value}\n                        maxValue = {5}\n                        text={`${roundedValue}yrs`}\n                        /* This is important to include, because if you're fully managing the\n                        animation yourself, you'll want to disable the CSS animation. */\n                        styles={buildStyles({ \n                            pathTransition: \"none\",\n                            // strokeLinecap: \"butt\" \n                        })}\n                        />\n                        );\n                    }}\n            </AnimatedProgressProvider>\n            <Typography variant=\"h5\">\n                {skillName}\n            </Typography>\n        </div>\n    )\n};\n\nexport default Skill;","import React from 'react';\n\nimport Skill from './Skill';\n\nimport { Paper,makeStyles,Grid } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n    root:{\n        display:\"flex\",\n        padding:40\n    }\n})\nconst Skills = (props)=>{\n    const classes = useStyles();\n    \n    const skills = props.skillInfo;\n\n    return(\n        <Paper elevation={3} className = {classes.root}>\n            <Grid container spacing = {10}>\n                {skills.map( (skill,key)=>{\n                    return(\n                        <Grid item xs key = {key}>\n                            <Skill years = {skill.year} skillName = {skill.name}/>\n                        </Grid>\n                    )\n                })}\n            </Grid>\n        </Paper>\n    )\n}\n\nexport default Skills;","import React from 'react';\n\nimport {Typography, ListItem, ListItemText, makeStyles, Divider} from \"@material-ui/core\";\nimport { Link} from 'react-router-dom';\n\nconst useStyles = makeStyles({\n    listItems:{\n        display:\"flex\",\n        flexDirection:\"column\",\n        alignItems:\"start\"\n    },\n    summary:{\n        paddingLeft:\"10px\"\n    }\n})\n\nconst Experience = (props)=>{\n    const classes = useStyles();\n    \n    var {title, course, startDate,endDate, summary} = props.experience;\n\n    var date = \"\";\n    if(course !== \"\"){\n        date = date.concat(course + \" / \");\n    };\n    date = date.concat(startDate +\n    \" - \" +\n    endDate);\n\n    return(\n        <div>\n            <Divider/>\n            <ListItem className = {classes.listItems}>\n                <ListItemText\n                    primary={\n                        <Typography variant=\"h6\" component={Link} to={process.env.PUBLIC_URL + `/pages/${title}`}>\n                            {title}\n                        </Typography>\n                    }\n                    secondary={date}\n                />\n                <ListItemText className ={classes.summary}>\n                    {summary.map((point,key) =>{\n                        return(\n                            <Typography key = {key}>\n                                {point.point}\n                            </Typography>\n                        )\n                    })}\n                </ListItemText>\n            </ListItem>\n        </div>\n    )\n}\n\nexport default Experience;","import React from 'react';\n\nimport {Typography, List, Paper, makeStyles} from \"@material-ui/core\";\n\nimport Experience from './Experience';\n\nconst useStyles = makeStyles({\n    experiences:{\n        padding:'20px'\n    },\n})\n\nconst ExperienceList = (props)=>{\n    const classes = useStyles();\n    const experiences = props.experiences;\n\n    return(\n        <Paper elevation ={3} className = {classes.experiences}>\n            <Typography variant = \"h5\">\n                Experiences\n            </Typography>\n            <List>\n                {experiences.map((experience, key)=>{\n                    return(\n                        <Experience experience = {experience} key = {key}/>\n                    )\n                })}\n            </List>\n        </Paper>\n    )\n}\nexport default ExperienceList;","import React from \"react\";\n\n// import Timeline from \"../../component/TimelineBio\";\nimport User from '../../component/User';\nimport About from '../../component/About';\nimport Skills from '../../component/skills/SkillList';\nimport ExperienceList from '../../component/experiences/ExperienceList';\n\nimport {Grid} from \"@material-ui/core\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nimport Data from '../../Data/resume.json';\n\nconst useStyles = makeStyles({\n  root: {\n    flexWrap: \"wrap\"\n  },\n  child:{\n    marginTop:20\n  }\n})\n\nconst Home = ()=>{\n\n  const classes = useStyles();\n\n  return(\n    <>\n      {/* <p>Home</p> */}\n      <Grid container spacing = {2} className = {classes.root}>\n        <Grid container direction = \"column\" item md = {3} xs = {12}>\n          <Grid className = {classes.child}>\n            <User userInfo = {Data.basics}/>\n          </Grid>\n        </Grid>\n        <Grid container direction =\"column\" item md = {9} xs = {12}>\n          <Grid className = {classes.child}>\n            <About userInfo = {Data.basics}/>\n          </Grid>\n          <Grid className = {classes.child}>\n            <Skills skillInfo = {Data.skills}/>\n          </Grid>\n          {/* For the experiences */}\n          <Grid className = {classes.child}>\n            <ExperienceList experiences = {Data.experiences}/>\n          </Grid>\n          {/* For the projects */}\n          <Grid className = {classes.child}>\n            <ExperienceList experiences = {Data.projects}/>\n          </Grid>\n        </Grid>\n      </Grid>\n      {/* <Paper>\n      <Timeline/>\n      </Paper> */}\n    </>\n  )\n}\n\n// class Home extends Component {\n//   constructor(props){\n//     super(props);\n//     this.about = this.props.resume;\n//   }\n\n//   render(){\n//     return(\n//       <div className = \"home\">\n//         <div className = \"orange box\" id = \"summary\">\n//           <h2 className = \"title white bold\">\n//             WHO AM I\n//           </h2>\n//           <p className = \"white\">\n//             {this.about.summary}\n//           </p>\n//           <button>\n//             Resume\n//           </button>\n//         </div>\n//         <div className = \"gray box\" id = \"personal-info\">\n//           <h2 className = \"title white bold\">\n//             Personal info\n//           </h2>\n//           <p className = \"white\">\n//             {this.about.permanentAddress}\n//           </p>\n//         </div>\n//         <div className = \"gray box\" id = \"achievement\">\n//           <h2 className = \"title white bold\">\n//             achievement\n//           </h2>\n//           <Timeline/>\n//           {/* single line with the dots representing event*/}\n//         </div>\n//         <div className = \"box\" id = \"skills\">\n//           <h2 className = \"title bold\">\n//             Skills\n//           </h2>\n//           {/*bar chart using d3*/}\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\nexport default Home;","import React, { useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport * as topojson from 'topojson';\nimport { sliderBottom } from 'd3-simple-slider';\n\n\nconst Map = (props) => {\n\n    const { mapData, coronaData, date, setDate, type, setType, setCounty } = props;\n    const [yesterday, setYesterday] = useState(\"\");\n\n    // hooks  -----------------------------------------------\n\n    //similar to componentdidMount, as it does not run except the initial render.\n    useEffect(() => {\n        setCaptions();\n        loadButtons();\n        loadTooltip();\n        loadMapData(0.5);\n        // loadSlider();\n    }, []);\n\n    useEffect(() => {\n        updateCaseData();\n    }, [date, type, yesterday]);\n\n    // components  ---------------------------------------------\n\n    //sets the titles on the caption and subcaptions\n    function setCaptions() {\n        const element = d3.select(\".coronaMap\");\n        element\n            .select(\".caption\")\n            .text(\"Daily update of covid cases at Virginia\");\n        element\n            .select(\".subcaption\")\n            .text(\"shows the number of death, hospitalization, and cases\")\n    }\n\n    //addes a button to select the date for the specific day selected,\n    //and another button to select the type of the data to display among\n    //deaths, hospitaliziations, and total cases\n    function loadButtons() {\n        const dateButton = d3.select(\".dateButton\")\n        const typeButton = d3.select(\".typeButton\")\n\n        const types = [\"deaths\", \"hospitalizations\", \"cases\"]\n\n        // handles date button\n        dateButton\n            .on(\"change\", (event) => {\n                setDate(event.target.value)\n                try {\n                    setYesterday(event.target[event.target.selectedIndex + 1].value)\n                }\n                catch (e) {\n                    setYesterday(\"\")\n                    console.log(\"first data\")\n                }\n            })\n            .selectAll(\"option\")\n            .data(getAvailableDates())\n            .enter()\n            .append(\"option\")\n            .text((value, key) => {\n                return value\n            })\n\n        setDate(getAvailableDates()[0])\n        setYesterday(getAvailableDates()[1])\n\n        // handles type button\n        typeButton\n            .on(\"change\", (event) => {\n                setType(event.target.value)\n            })\n            .selectAll(\"option\")\n            .data(types)\n            .enter()\n            .append(\"option\")\n            .attr(\"value\", (value, key) => {\n                return value;\n            })\n            .text((value, key) => {\n                return value;\n            })\n    }\n\n\n    //sets property for the tooltip\n    function loadTooltip() {\n        d3\n            .select(\".tooltip\")\n            .style(\"visibility\", \"hidden\")\n            .style(\"position\", \"absolute\")\n            .style(\"background-color\", \"white\")\n            .style(\"padding\", \"2px\")\n            .style(\"border\", \"thin solid black\")\n    }\n\n    //using the url, loads the map data and display\n    function loadMapData(scale) {\n        const [width, height] = [1920, 1080];\n\n        let projection = d3\n            .geoMercator()\n            .scale(20000 * scale)\n            .translate([0, 0]);\n\n        let countyPath = d3\n            .geoPath()\n            .projection(projection);\n\n        let svg = d3\n            .select(\"#map\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n            .attr(\"viewBox\", \"0 0 \" + width + \" \" + height);\n\n        let state = topojson.feature(mapData, mapData.objects.cb_2015_virginia_county_20m);\n        let bounds = countyPath.bounds(state);\n\n        projection.translate([width / 2 - (bounds[0][0] + bounds[1][0]) / 2, height / 2 - (bounds[0][1] + bounds[1][1]) / 2]);\n\n        let tooltip = d3.select(\".tooltip\")\n\n        svg\n            .selectAll(\"path\")\n            .data(state.features)\n            .enter()\n            .append(\"path\")\n            .classed(\"county\", true)\n            .attr(\"id\", county => {\n                return county.properties.GEOID\n            })\n            .attr(\"name\", county => {\n                return county.properties.NAME\n            }\n            )\n            .attr(\"fill\", \"grey\")\n            .style(\"stroke\", \"black\")\n            .style(\"stroke-width\", \"1px\")\n            .style(\"stroke-linecap\", \"round\")\n            .style(\"stroke-linejoin\", \"round\")\n            .attr(\"value\", 0)\n            .attr(\"d\", countyPath)\n            .on(\"click\", (event, value) => {\n                // console.log(event, value)\n                setCounty(value.properties.GEOID)\n            })\n            .on(\"mouseover\", (event) => {\n                //sets design when mouse hovers\n                d3.select(event.target)\n                    .style(\"opacity\", \"0.5\")\n                    .style(\"stroke-width\", \"2px\")\n\n                var value = event.target.getAttribute(\"value\");\n                tooltip.text(`${event.target.getAttribute(\"name\")}, ${value}`);\n                return tooltip.style(\"visibility\", \"visible\");\n            })\n            .on(\"mousemove\", (event) => {\n                return tooltip\n                    .style(\"top\", (event.pageY + 10) + \"px\")\n                    .style(\"left\", (event.pageX + 10) + \"px\");\n            })\n            .on(\"mouseout\", (event) => {\n                //converts the design back when mouse outs\n                d3.select(event.target)\n                    .style(\"opacity\", \"1\")\n                    .style(\"stroke-width\", \"1px\")\n\n                tooltip.text(\"\");\n                return tooltip.style(\"visibility\", \"hidden\");\n            });\n    }\n\n    //adds the associated colors to the map based on the\n    //selected button options\n    function updateCaseData() {\n        const currentData = coronaData.filter((data) => {\n            return data.report_date === date\n        })\n        const yesterdayData = coronaData.filter((data) => {\n            return data.report_date === yesterday\n        })\n\n        //set the max nubmer for the color based on the type\n        var max;\n        switch (type) {\n            case \"deaths\":\n                max = 5;\n                break;\n            case \"hospitalizations\":\n                max = 5;\n                break;\n            case \"cases\":\n                max = 100;\n                break;\n            default:\n                max = null;\n        }\n\n        //updated values from the day before\n        //daily updated values\n        currentData.map((data, index) => {\n            let value;\n            let currentCounty = d3\n                .select(\"svg\")\n                .select('[id = \"' + data.fips + '\"]')\n\n            //parse data based on the type\n            try {\n                if (type === \"deaths\") {\n                    if (yesterdayData[index] === undefined) {\n                        value = parseInt(data.deaths)\n                    } else {\n                        value = data.deaths - yesterdayData[index].deaths\n                    }\n                }\n                else if (type === \"hospitalizations\") {\n                    if (yesterdayData[index] === undefined) {\n                        value = parseInt(data.hospitalizations)\n                    }\n                    else {\n                        value = data.hospitalizations - yesterdayData[index].hospitalizations\n                    }\n                }\n                else if (type === \"cases\") {\n                    if (yesterdayData[index] === undefined) {\n                        value = parseInt(data.total_cases)\n                    }\n                    else {\n                        value = data.total_cases - yesterdayData[index].total_cases\n                    }\n                }\n                else {\n                    console.log(\"wrong type\")\n                }\n\n                //set value on tooltip\n                currentCounty\n                    .attr(\"value\", `${type}: ${value}`)\n            }\n            catch (e) {\n                console.log(\"data is not loaded yet\")\n            }\n\n            //set color of each county\n            currentCounty\n                .attr(\"fill\", () => {\n                    return d3\n                        .scaleLinear()\n                        .domain([-1, 0, max / 2, max])\n                        .range(['black', \"green\", \"yellow\", \"red\"])\n                        .interpolate(d3.interpolateRgb)(value);\n                })\n        })\n    }\n\n    // function loadSlider(){\n    // }\n\n    // function updateSlider(){\n    // }\n\n    // helper ---------------------------------------------------\n\n    //gets all the available dates from the source url\n    function getAvailableDates() {\n        return [...new Set(coronaData.map((each) => {\n            return each.report_date\n        }))]\n    }\n\n    // return   --------------------------------------------------\n    //basic structure of the components.\n    return (\n        <div className=\"coronaMap\" style={{ textAlign: \"center\" ,backgroundColor:\"yellow\"}}>\n            <h2 className=\"caption\">\n                where caption will be\n            </h2>\n            <p className=\"subcaption\">\n                where subcaption will be\n            </p>\n            <select className=\"dateButton map\"></select>\n            <select className=\"typeButton map\"></select>\n            <svg id=\"map\"></svg>\n            {/* <div className = \"slider\"></div> */}\n            <div className=\"tooltip\"></div>\n        </div>\n    );\n}\n\nexport default Map;","import React, { useEffect, useState } from 'react';\nimport * as d3 from \"d3\";\nimport { tickStep } from 'd3';\n\nconst Chart = (props) => {\n    const [width, height] = [1920, 1080];\n    const { coronaData, county, type } = props;\n    const [max,setMax] = useState(1000)\n    // hooks  -----------------------------------------------\n\n    //similar to componentdidMount, as it does not run except the initial render.\n    useEffect(() => {\n        setCaptions();\n        loadplane();\n    }, []);\n\n    useEffect(() => {\n        loadaxis();\n        updateData();\n    }, [county, max]);\n\n    // components  ---------------------------------------------\n\n\n    //sets the titles on the caption and subcaptions\n    function setCaptions() {\n        const element = d3.select(\".coronaChart\");\n        element\n            .select(\".caption\")\n            .text(\"Changes of the COVID cases at Virginia\");\n        element\n            .select(\".subcaption\")\n            .text(\"Shows the daily changes of the number of the covid cases\")\n    }\n\n    // Creates the chart.\n    // Adapted from https://bl.ocks.org/gordlea/27370d1eea8464b04538e6d8ced39e89\n    function loadplane() {\n\n        d3.select(\".chart-wrapper\")\n            .style(\"padding\", \"2em\")\n\n        // Add the svg element to the HVChart.\n        d3.select(\"#chart\")\n            .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n            .attr(\"viewBox\", `0 0 ${width} ${height}`)\n            .style(\"overflow\", \"visible\")\n            .append(\"g\")\n\n    }\n\n    function loadaxis() {\n        var chart = d3.select(\"#chart\")\n\n        var svg = chart\n            .select(\"g\")\n\n        svg.selectAll(\"*\")\n            .remove();\n\n        var uniqueDataLength = getDataLength();\n\n        // X scale will use the quarter data.\n        var xScale = d3.scaleLinear()\n            .domain([0, uniqueDataLength - 1]) // input\n            .range([width, 0]); // output\n\n        // Y scale will use the percentage data\n        var yScale = d3.scaleLinear()\n            .domain([0, max]) // input\n            .range([height, 0]); // output\n\n\n        // An array of objects of length n (umber fo quarters).\n        // Each object has key -> value pair, the key being \"y\" and the value is percentage data.\n        // var dataset = d3.range(n).map(function(d) { return {\"y\": 100 * d3.randomUniform(1)() } })\n\n        // Call (generate) the x axis in a group tag.\n        svg.append(\"g\")\n            .attr(\"class\", \"xaxis\")\n            .attr(\"transform\", `translate(0, ${height})`)\n            .call(d3.axisBottom(xScale).tickValues(d3.range(0, uniqueDataLength, 1))); // Create an axis component with d3.axisBottom and selected values.\n\n        // Call (generate) the y axis in a group tag.\n        svg.append(\"g\")\n            .attr(\"class\", \"yaxis\")\n            .attr(\"transform\", `translate(${width}, 0)`)\n            .call(d3.axisRight(yScale).tickValues(d3.range(0, max, 100))); // Create an axis component with d3.axisLeft\n\n        svg\n            .select(\".xaxis\")\n            .selectAll(\"text\")\n            .text((index) => {\n                const [year, month, date, time] = getAvailableDates()[index].split(/-|T/);\n                return (`${month}/${date}/${year}`)\n            })\n        // .style(\"transform\", \"rotate(10deg)\")\n\n        // Set the labels for y values.\n        svg\n            .select(\".yaxis\")\n            .selectAll(\"text\")\n            .text((t) => {\n                return t\n            });\n    }\n\n    function updateData() {\n\n        //remove any pre-existing data from the previous click\n        d3.select(\".line\")\n            .remove();\n\n        var countyData = coronaData.filter((each) => {\n            return each.fips === county;\n        })\n\n        var data = [...(countyData.map((each, index) => {\n            if (type === \"deaths\") {\n                return each.deaths;\n            }\n            else if (type === \"hospitalizations\") {\n                return each.hospitalizations;\n            }\n            else if (type === \"cases\") {\n                return each.total_cases;\n            }\n            else {\n                return null;\n            }\n        }))]\n\n        setMax(data[0])\n\n        var uniqueDataLength = getDataLength();\n\n        // X scale will use the quarter data.\n        var xScale = d3.scaleLinear()\n            .domain([0, uniqueDataLength - 1]) // input\n            .range([width, 0]); // output\n        // Y scale will use the percentage data\n        var yScale = d3.scaleLinear()\n            .domain([0, max]) // input\n            .range([height, 0]); // output\n\n        // Create d3's line generator.\n        var line = d3.line()\n            .x((data, index) => {\n                // console.log(xScale(data))\n                return xScale(index);\n            }) // set the x values for the line generator\n            .y((data, index) => {\n                return yScale(data);\n            }); // set the y values for the line generator\n\n        d3.select(\".coronaChart\")\n            .select(\"g\")\n            .append(\"path\")\n            .datum(data)\n            .classed(\"line\", true)\n            .attr(\"d\", line)\n            .style(\"fill\", \"none\")\n            .style(\"stroke-width\", 3)\n            .style(\"stroke\", \"ffab00\");\n    }\n\n    // helper ---------------------------------------------------\n\n    //gets all the available dates from the source url\n    function getAvailableDates() {\n        return [...new Set(coronaData.map((each) => {\n            return each.report_date\n        }))]\n    }\n\n    function getDataLength() {\n        return [...new Set(coronaData.map((each) => {\n            return each.report_date\n        }))].length;\n    }\n\n    // return   --------------------------------------------------\n    //basic structure of the components.\n    return (\n        <div className=\"coronaChart\" style={{ textAlign: \"center\", backgroundColor: \"green\" }}>\n            <h2 className=\"caption\">\n                where caption will be\n            </h2>\n            <p className=\"subcaption\">\n                where subcaption will be\n            </p>\n            <div className=\"chart-wrapper\">\n                <svg id=\"chart\"></svg>\n            </div>\n            {/* <div className = \"slider\"></div> */}\n            <div className=\"tooltip\"></div>\n        </div>\n    )\n}\n\nexport default Chart;","import React, { useState, useEffect } from 'react';\nimport * as d3 from \"d3\";\nimport Map from './Map';\nimport Chart from './Chart';\n\nconst virginiaMapDataURL = \"https://raw.githubusercontent.com/deldersveld/topojson/master/countries/us-states/VA-51-virginia-counties.json\";\nconst coronaVirginiaDatasetURL = \"https://data.virginia.gov/resource/bre9-aqqr.json\";\nconst CovidCases = () => {\n  const [loading, setLoading] = useState(true);\n  const [mapData, setMapData] = useState(\"\");\n  const [coronaData, setCoronaData] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [type, setType] = useState(\"\");\n  const [county, setCounty] = useState(\"\");\n\n\n  useEffect(() => {\n    if (loading) {\n      //set loading be true after getting data\n      // setTimeout(() => {\n      d3.json(virginiaMapDataURL).then((mapData) => {\n        d3.json(coronaVirginiaDatasetURL).then((coronaData) => {\n          setMapData(mapData);\n          // console.log(\"t\")\n          setCoronaData(coronaData);\n          setType(\"deaths\");\n          // setTimeout(() => {\n          //   console.log(\"a\")\n          setCounty(mapData.objects.cb_2015_virginia_county_20m.geometries[0].properties.GEOID)\n          // }, 5000);\n          // console.log(\"e\")\n          setLoading(false);\n        })\n      });\n      // }, 5000)\n    }\n  }, [loading]);\n\n  return (\n    <div>\n      {\n        loading ? (\n          <p>loading...</p>\n        ) : (\n            // <div style={{display:\"flex\", justifyContent:\"center\"}}>\n            <div>\n              {/* <p>done loading</p> */}\n              <Map\n                mapData={mapData}\n                coronaData={coronaData}\n                date={date}\n                setDate={setDate}\n                type={type}\n                setType={setType}\n                setLoading={setLoading}\n                setCounty={setCounty}\n              />\n              <Chart\n                coronaData={coronaData}\n                county={county}\n                type={type}\n              />\n            </div>\n          )\n      }\n    </div>\n  );\n}\n\nexport default CovidCases;\n","import React from 'react';\nimport \"./Experience.css\";\nimport CovidMap from \"../../component/projects/covidCases\";\n\nconst Experience = ({match})=>{\n    if(match.params.projectName === \"Coordinated Multiple Views\"){\n        return(\n            <>\n                <p>{match.params.projectName}</p>\n                <CovidMap/>\n            </>\n        )\n    }\n    else{\n        return(\n            <p>{match.params.projectName}</p>\n        )\n    }\n}\n\n// class Experience extends Component{\n//   constructor(props){\n//     super(props);\n//     this.exp = this.props.exp;\n//   }\n//   render(){\n//     const list = this.exp.map((each, key) =>\n//       <div className = \"experience\" key = {key}>\n//         <h3 className = \"experience title\">\n//           {each.title}\n//         </h3>\n//         <p className = \"experience date\">\n//           {each.startDate} {each.endDate}\n//         </p>\n//         <p className = \"experience company\">\n//           {each.company}\n//         </p>\n//         <p className = \"experience course\">\n//           {each.course}\n//         </p>\n//         <ul className = \"experience description\">\n//           {each.summary.map((summary,key) =>\n//             <li className = \"summary\" key = {key}>\n//               {summary.point}\n//             </li>\n//           )}\n//         </ul>\n//       </div>\n//     )\n\n//     return(\n//       <div>\n//         {list}\n//       </div>\n//     );\n//   }\n// }\n\nexport default Experience;\n","import React from \"react\";\n\nimport Paper from '@material-ui/core/Paper';\nimport { TextField, Button } from \"@material-ui/core\";\n\nconst Form = (props)=>{\n    \n    if(props.types === \"login\"){\n        return(\n            <Paper>\n                <TextField id=\"standard-basic\" label = \"username\"/>\n                <TextField id=\"standard-basic\" label = \"password\"/>\n                <Button>login</Button>\n            </Paper>\n        )\n    }\n    else if(props.types === \"createAccount\"){\n        return(\n            <Paper>\n                <TextField id=\"standard-basic\" label = \"First Name\"/>\n                <TextField id=\"standard-basic\" label = \"Last Name\"/>\n                <TextField id=\"standard-basic\" label = \"username\"/>\n                <TextField id=\"standard-basic\" label = \"password\"/>\n\n                <Button>Create Account</Button>\n            </Paper>\n        )\n    }\n    else{\n        return(\n            <p>Other types</p>\n        )\n    }\n}\n\nexport default Form;","import React from 'react';\n\nimport Form from '../../../component/Form';\n\nconst Login = ()=>{\n    return(\n        <div className = \"loginPage\">\n            <Form types = \"login\"/>\n        </div>\n    )\n}\n\nexport default Login;","import React from 'react';\n\nconst Logout = ()=>{\n    return(\n        <div className=\"LogoutPage\">\n            <p>logout</p>\n        </div>\n    )\n}\n\nexport default Logout;","import React from 'react';\n\nimport Form from '../../../component/Form';\n\nconst CreateAccount = ()=>{\n    return(\n        <div className = \"createAccountPage\">\n            <Form types = \"createAccount\"/>\n        </div>\n    )\n};\n\nexport default CreateAccount;","import React from 'react';\nimport{Route, Switch} from 'react-router-dom';\n\nimport {Container} from \"@material-ui/core\";\n\nimport Home from './Pages/HomePage';\nimport ExperiencePage from './Pages/ExperiencePage';\n\nimport Login from './Pages/LoginPages/LoginPage';\nimport Logout from './Pages/LoginPages/LogoutPage';\nimport CreateAccount from './Pages/LoginPages/CreateAccountPage';\n// import Activity from './Page/Activity';\n\nconst Body = () =>{\n    return(\n        <Container>\n            <Switch>\n                <Route path={process.env.PUBLIC_URL + \"/login\"} component = {Login}/>\n                <Route path={process.env.PUBLIC_URL + \"/logout\"} component = {Logout}/>\n                <Route path={process.env.PUBLIC_URL + \"/create-account\"} component = {CreateAccount}/>\n                \n                <Route path={process.env.PUBLIC_URL + \"/pages/:projectName\"} component={ExperiencePage}/>\n                {/* <Route path=\"/activity\" component={Home}/> */}\n                <Route path={process.env.PUBLIC_URL + \"/\"} component={Home} />\n\n            </Switch>\n        </Container>\n    )\n}\n\nexport default Body;","import React from 'react';\nimport {  BrowserRouter as Router} from 'react-router-dom';\n\nimport Header from \"./Header/Header\";\nimport Body from \"./Body/Body\";\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport AppBar from '@material-ui/core/AppBar';\n\n\nconst Main = () => {\n    \n  return(\n    <>\n      <CssBaseline />\n      <Router>\n        <AppBar position=\"static\">\n            <Header/>\n        </AppBar>\n        <Body/>\n      </Router>\n    </>\n  )\n}\n\nexport default Main;\n\n\n// const navClick = this.state.nav;\n// let nav;\n// var def = <Home resume = {Resume.basics}/>;\n\n\n// if(navClick === \"HOME\"){\n//   nav = def;\n// }\n// else if(navClick === \"EXPERIENCE\"){\n//   nav = <Experience exp = {Resume.experiences}/>;\n// }\n// else if(navClick === \"ACTIVITY\"){\n//   nav = <Activity act = {Resume.activities}/>;\n// }\n// else {\n//   nav = def;\n// }\n// return (\n//   <div className = \"main\">\n//     <Header\n//       resume = {Resume.basics}\n//       onNavChange = {this.setNav}\n//     />\n//     <div className = \"content\">\n//       {nav}\n//     </div>\n//   </div>\n// );\n// }","import React, {Component} from 'react';\nimport './App.css';\nimport Main from './Main/Main';\n\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n    document.title = \"Resume:Jaeung\"\n  }\n  render(){\n    return (\n      <Main/>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'fontsource-roboto';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}